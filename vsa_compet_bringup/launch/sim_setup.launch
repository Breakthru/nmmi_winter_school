<launch>

  <arg name="sim_mode" default="true"/>

  <param name="robot_description" command="$(find xacro)/xacro.py $(find vsa_3dof_arm_description)/urdf/qb/body.urdf.xacro"/>
	
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

  <!-- Bring together the different joint state messages -->
  <!--node pkg="joint_state_publisher" type="joint_state_publisher"
        name="joint_state_publisher" output="screen">
    <rosparam param="source_list">
      - iai_qb_cube_driver/joint_state
    </rosparam>
    <rosparam param="zeros">
      'arm_0_joint': 0
      'arm_1_joint': 0
      'arm_2_joint': 0
      'arm_3_joint': -0.1
    </rosparam>
    <param name="rate" value="50"/>
    <param name="use_gui" value="False"/>
  </node-->

  <include file="$(find iai_qb_cube_driver)/launch/nmmi_challenge.launch">
    <arg name="sim_mode" value="$(arg sim_mode)"/>
  </include>

  <node pkg="vsa_compet_ik" type="arm_ik_controller.py" name="arm_ik_controller">
    <remap from="/iai_qb_cube_driver/command" to="/arm_interpolator/command"/>
  </node>

  <node pkg="vsa_compet_ik" type="int_marker_to_arm_ik.py" name="int_marker_to_arm"/>
  <node pkg="vsa_compet_ik" type="int_marker_server_3dof.py" name="int_marker_server_3dof"/>
	
  <node pkg="tf2_ros" type="buffer_server" name="t2_buffer_server"/>

  <node pkg="topic_tools" type="throttle" name="joint_state_throttle"
        args="messages joint_states 1"/>

</launch>
